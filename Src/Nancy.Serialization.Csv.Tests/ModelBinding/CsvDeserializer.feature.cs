// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18052
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Nancy.Serialization.Csv.Tests.ModelBinding
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("CSV Deserializer")]
    public partial class CSVDeserializerFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "CsvDeserializer.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "CSV Deserializer", "In order to validate CSV files are deserialized correctly\r\nAs a consumer of CSV f" +
                    "iles\r\nI want to ensure objects are constructed correctly.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate can deserialize")]
        [NUnit.Framework.TestCaseAttribute("application/csv", null)]
        [NUnit.Framework.TestCaseAttribute("text/csv", null)]
        [NUnit.Framework.TestCaseAttribute("application/vnd+csv", null)]
        public virtual void ValidateCanDeserialize(string contentType, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate can deserialize", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given(string.Format("the content {0}", contentType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.Then("the CSV deserializer should be able to deserialize it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate cannot deserialize")]
        [NUnit.Framework.TestCaseAttribute("application/json", null)]
        [NUnit.Framework.TestCaseAttribute("text/json", null)]
        [NUnit.Framework.TestCaseAttribute("application/vnd+json", null)]
        public virtual void ValidateCannotDeserialize(string contentType, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate cannot deserialize", exampleTags);
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
 testRunner.Given(string.Format("the content {0}", contentType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 18
 testRunner.Then("the CSV deserializer should NOT be able to deserialize it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate deserialization into a list")]
        public virtual void ValidateDeserializationIntoAList()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate deserialization into a list", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "First Name",
                        "Last Name",
                        "Gender"});
            table1.AddRow(new string[] {
                        "Liz",
                        "Lemon",
                        "Female"});
            table1.AddRow(new string[] {
                        "Jack",
                        "Donaghy",
                        "Male"});
            table1.AddRow(new string[] {
                        "Tracy",
                        "Jordan",
                        "Male"});
            table1.AddRow(new string[] {
                        "Jenna",
                        "Maroney",
                        "Female"});
#line 27
 testRunner.Given("the CSV data", ((string)(null)), table1, "Given ");
#line 33
 testRunner.When("it is deserialized into a list object", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "First Name",
                        "Last Name",
                        "Gender"});
            table2.AddRow(new string[] {
                        "Liz",
                        "Lemon",
                        "Female"});
            table2.AddRow(new string[] {
                        "Jack",
                        "Donaghy",
                        "Male"});
            table2.AddRow(new string[] {
                        "Tracy",
                        "Jordan",
                        "Male"});
            table2.AddRow(new string[] {
                        "Jenna",
                        "Maroney",
                        "Female"});
#line 34
 testRunner.Then("the following items should be in the list", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
